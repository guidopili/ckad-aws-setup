- name: Setup nodes
  hosts: all
  become: yes
  tasks:
    - name: Change hostname
      hostname:
        name: "{{ new_hostname }}"
    - name: Ensure all to latest 
      apt:
        name: "*"
        update_cache: yes
        state: latest
    - name: Upgrade all packages
      apt:
        upgrade: dist
    - name: Disable swap
      shell: swapoff -a
    - name: Adds GCE key
      apt_key:
        url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg" 
        state: present
    - name: Adds repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes
    - name: Install packages
      apt:
        pkg:
          - kubeadm=1.26.0-00
          - kubelet=1.26.0-00
          - kubectl=1.26.0-00
    - name: Hold kubeadm
      dpkg_selections:
        name: kubeadm
        selection: hold
    - name: Hold kubelet
      dpkg_selections:
        name: kubelet
        selection: hold
    - name: Hold kubectl
      dpkg_selections:
        name: kubectl
        selection: hold
    - name: Create crio.conf
      when: use_crio is defined and use_crio
      copy:
        dest: "/etc/modules-load.d/crio.conf"
        content: |
          overlay
          br_netfilter
    - name: Create containerd.conf
      when: use_crio is not defined or not use_crio
      copy:
        dest: "/etc/modules-load.d/containerd.conf"
        content: |
          overlay
          br_netfilter
    - name: Add the overlay module
      modprobe:
        name: overlay
    - name: Add the br_netfilter module
      modprobe:
        name: br_netfilter
    - name: Create k8s-cri.conf
      copy:
        dest: "/etc/sysctl.d/99-kubernetes-cri.conf"
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
    - name: Reload systemd
      command: sysctl --system
    - name: Install containerd
      when: use_crio is not defined or not use_crio
      apt:
        name: containerd
        state: present
    - name: Configure containerd
      when: use_crio is not defined or not use_crio
      command: containerd config default | sudo tee /etc/containerd/config.toml
    - name: Reload containerd
      when: use_crio is not defined or not use_crio
      systemd:
        name: containerd
        state: restarted
    - name: Adds libcontainers key
      when: use_crio is defined and use_crio
      apt_key:
        url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/Release.key"
        keyring: /etc/apt/trusted.gpg.d/libcontainers.gpg
        state: present
    - name: Adds libcontainer repository
      when: use_crio is defined and use_crio
      apt_repository:
        repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /
        state: present
        filename: devel:kubic:libcontainers:stable.list
    - name: Adds cri-o key
      when: use_crio is defined and use_crio
      apt_key:
        url: "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:1.26/xUbuntu_22.04/Release.key"
        keyring: /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg
        state: present
    - name: Adds cri-o repository
      when: use_crio is defined and use_crio
      apt_repository:
        repo: deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.26/xUbuntu_22.04/ /
        state: present
        filename: devel:kubic:libcontainers:stable:cri-o:1.26.list
    - name: Install cri-o
      when: use_crio is defined and use_crio
      apt:
        pkg:
          - cri-o
          - cri-o-runc
    - name: Enable cri-o
      when: use_crio is defined and use_crio
      systemd:
        name: crio
        state: restarted
        daemon_reload: True
        enabled: True
- name: Setup master node
  hosts: master
  become: yes
  tasks:
    - name: Check kube config
      stat:
        path: /home/{{ ansible_ssh_user }}/.kube/config
      register: config_file
    - name: Add yq key
      apt_key:
        id: CC86BB64
        keyserver: keyserver.ubuntu.com
        state: present
    - name: Adds yq repository
      apt_repository:
        repo: ppa:rmescandon/yq
        state: present
    - name: Install yq
      apt:
        name: yq
        state: present
    - name: Dump default config
      shell: kubeadm config print init-defaults --component-configs=KubeletConfiguration
      register: kubeadm_config
    - name: Create kubeadm config
      copy:
        dest: "/tmp/kubeadm-config.yaml"
        content: "{{ kubeadm_config.stdout }}"
    - name: Edit advertiseAddress config
      command: yq e '(select (.localAPIEndpoint.advertiseAddress) | .localAPIEndpoint.advertiseAddress) = "0.0.0.0"' -i /tmp/kubeadm-config.yaml 
    - name: Edit networking config
      command: yq e '(select (.networking.podSubnet) | .networking.podSubnet) = "192.168.0.0/16"' -i /tmp/kubeadm-config.yaml 
    - name: Add extra san
      command: yq e '(select (.apiServer) | .apiServer.certSANs) += ["{{ inventory_hostname }}"]' -i /tmp/kubeadm-config.yaml 
    - name: Edit cgroup driver config
      when: use_crio is defined and use_crio
      command: yq e '(select (.cgroupDriver) | .cgroupDriver) = "systemd"' -i /tmp/kubeadm-config.yaml 
    - name: Edit cri socket config
      when: use_crio is defined and use_crio
      command: yq e '(select (.nodeRegistration.criSocket) | .nodeRegistration.criSocket) = "unix:///var/run/crio/crio.sock"' -i /tmp/kubeadm-config.yaml 
    - name: Edit containerd socket config
      when: use_crio is not defined or not use_crio
      command: yq e '(select (.nodeRegistration.criSocket) | .nodeRegistration.criSocket) = "unix:///var/run/containerd/containerd.sock"' -i /tmp/kubeadm-config.yaml 
    - name: Init kubeadm
      command: kubeadm init --config /tmp/kubeadm-config.yaml
      when: not config_file.stat.exists
    - name: Make .kube dir
      become: no
      when: not config_file.stat.exists
      file:
        path: "/home/{{ ansible_ssh_user }}/.kube"
        state: directory
        owner: "{{ ansible_ssh_user }}"
    - name: Copy config
      when: not config_file.stat.exists
      copy:
        remote_src: yes
        src:  /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_ssh_user }}/.kube/config"
        owner: "{{ ansible_ssh_user }}"
    - name: Apply network config
      command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
      become: no
    - name: Adds metric server
      command: kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
      become: no
    - name: Patch metrics-server
      command: kubectl patch deployment metrics-server --type json -p '[{"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--kubelet-insecure-tls"}]' -n kube-system
      become: no
    - name: Get join command
      shell: kubeadm token create --print-join-command
      register: join_command
    - name: "Add K8S join command to dummy host"
      add_host:
        name: K8S_JOIN_COMMAND
        join_command: "{{ join_command.stdout }}"
- name: Setup minions
  hosts: minion
  become: yes
  tasks:
    - name: Check file
      stat:
        path: /etc/kubernetes/pki/ca.crt
      register: exists_ca
    - name: Init minion
      command: "{{ hostvars['K8S_JOIN_COMMAND']['join_command'] }}"
      when: not exists_ca.stat.exists
